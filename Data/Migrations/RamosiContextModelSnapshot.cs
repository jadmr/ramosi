// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(RamosiContext))]
    partial class RamosiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Data.Entities.GoogleAuth", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Sub")
                        .HasColumnType("varchar(512)")
                        .HasMaxLength(512);

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Guid");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("GoogleAuths");
                });

            modelBuilder.Entity("Data.Entities.Plant", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("PlantCharacteristicId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Guid");

                    b.HasIndex("PlantCharacteristicId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Data.Entities.PlantCharacteristic", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasMaxLength(8000);

                    b.HasKey("Guid");

                    b.ToTable("PlantCharacteristics");
                });

            modelBuilder.Entity("Data.Entities.PlantCollection", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Nickname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasMaxLength(8000);

                    b.Property<byte[]>("PlantId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Guid");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantCollections");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(254)")
                        .HasMaxLength(254);

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Data.Entities.WateringSchedule", b =>
                {
                    b.Property<byte[]>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25);

                    b.Property<byte[]>("PlantCollectionId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Repeat")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime>("TimeOfDay")
                        .HasColumnType("datetime");

                    b.HasKey("Guid");

                    b.HasIndex("PlantCollectionId");

                    b.ToTable("WateringSchedules");
                });

            modelBuilder.Entity("Data.Entities.GoogleAuth", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("GoogleAuth")
                        .HasForeignKey("Data.Entities.GoogleAuth", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Plant", b =>
                {
                    b.HasOne("Data.Entities.PlantCharacteristic", "PlantCharacteristic")
                        .WithMany("Plants")
                        .HasForeignKey("PlantCharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.PlantCollection", b =>
                {
                    b.HasOne("Data.Entities.Plant", "Plant")
                        .WithMany("PlantCollection")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("PlantCollection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.WateringSchedule", b =>
                {
                    b.HasOne("Data.Entities.PlantCollection", "PlantCollection")
                        .WithMany("Schedules")
                        .HasForeignKey("PlantCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
